import { NextResponse } from "next/server"
import { supabaseAdmin } from "@/lib/supabaseClient"

export async function GET(req: Request) {
  // üß© ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ session ‡∏à‡∏≤‡∏Å cookie
  const cookie = (req.headers.get("cookie") || "")
    .split(";")
    .find((c) => c.trim().startsWith("session="))

  if (!cookie) {
    return NextResponse.json({ authenticated: false }, { status: 401 })
  }

  try {
    // üì¶ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session ‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å cookie
    const session = JSON.parse(decodeURIComponent(cookie.split("=")[1]))

    const email = session?.email
    const provider = session?.provider || "form" // default ‡πÄ‡∏õ‡πá‡∏ô form

    if (!email) {
      return NextResponse.json({ authenticated: false }, { status: 401 })
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (users table) ‡∏ï‡∏≤‡∏° provider
    const { data: user, error } = await supabaseAdmin
      .from("users")
      .select("id, name, email, picture, provider")
      .eq("email", email)
      .eq("provider", provider)
      .maybeSingle() // ‡πÉ‡∏ä‡πâ maybeSingle ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠

    if (error || !user) {
      console.error("User not found or DB error:", error)
      return NextResponse.json({ authenticated: false }, { status: 404 })
    }

    // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ù‡∏±‡πà‡∏á client
    return NextResponse.json({
      authenticated: true,
      user: {
        id: user.id,
        name: user.name,
        email: user.email,
        picture: user.picture,
        provider: user.provider,
      },
    })
  } catch (err) {
    console.error("Session parse error:", err)
    return NextResponse.json({ authenticated: false }, { status: 500 })
  }
}
